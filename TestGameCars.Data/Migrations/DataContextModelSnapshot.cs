// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestGameCars.Data;

namespace TestGameCars.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestGameCars.Entities.Car", b =>
                {
                    b.Property<int>("idCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("brandCar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCar");

                    b.ToTable("cars");
                });

            modelBuilder.Entity("TestGameCars.Entities.Driver", b =>
                {
                    b.Property<int>("idDriver")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("idCar")
                        .HasColumnType("int");

                    b.Property<string>("nameDriver")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idDriver");

                    b.HasIndex("idCar")
                        .IsUnique();

                    b.ToTable("drivers");
                });

            modelBuilder.Entity("TestGameCars.Entities.Game", b =>
                {
                    b.Property<int>("idGame")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("idCar")
                        .HasColumnType("int");

                    b.Property<int>("idDriver")
                        .HasColumnType("int");

                    b.Property<int>("idLine")
                        .HasColumnType("int");

                    b.Property<int>("idPlayer")
                        .HasColumnType("int");

                    b.Property<int>("idTrack")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idGame");

                    b.HasIndex("idCar");

                    b.HasIndex("idDriver");

                    b.HasIndex("idLine");

                    b.HasIndex("idPlayer");

                    b.HasIndex("idTrack");

                    b.ToTable("games");
                });

            modelBuilder.Entity("TestGameCars.Entities.Line", b =>
                {
                    b.Property<int>("idLine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nameLine")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idLine");

                    b.ToTable("lines");
                });

            modelBuilder.Entity("TestGameCars.Entities.Player", b =>
                {
                    b.Property<int>("idPlayer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("countPlayer")
                        .HasColumnType("int");

                    b.Property<int>("idDriver")
                        .HasColumnType("int");

                    b.Property<string>("namePlayer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idPlayer");

                    b.HasIndex("idDriver")
                        .IsUnique();

                    b.ToTable("players");
                });

            modelBuilder.Entity("TestGameCars.Entities.Track", b =>
                {
                    b.Property<int>("idTrack")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("idLine")
                        .HasColumnType("int");

                    b.Property<int>("kilometres")
                        .HasColumnType("int");

                    b.Property<string>("nameTrack")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTrack");

                    b.HasIndex("idLine");

                    b.ToTable("tracks");
                });

            modelBuilder.Entity("TestGameCars.Entities.Driver", b =>
                {
                    b.HasOne("TestGameCars.Entities.Car", "car")
                        .WithOne("driver")
                        .HasForeignKey("TestGameCars.Entities.Driver", "idCar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("car");
                });

            modelBuilder.Entity("TestGameCars.Entities.Game", b =>
                {
                    b.HasOne("TestGameCars.Entities.Car", "car")
                        .WithMany("games")
                        .HasForeignKey("idCar")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestGameCars.Entities.Driver", "driver")
                        .WithMany("games")
                        .HasForeignKey("idDriver")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestGameCars.Entities.Line", "line")
                        .WithMany("games")
                        .HasForeignKey("idLine")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestGameCars.Entities.Player", "player")
                        .WithMany("games")
                        .HasForeignKey("idPlayer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestGameCars.Entities.Track", "track")
                        .WithMany("games")
                        .HasForeignKey("idTrack")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("car");

                    b.Navigation("driver");

                    b.Navigation("line");

                    b.Navigation("player");

                    b.Navigation("track");
                });

            modelBuilder.Entity("TestGameCars.Entities.Player", b =>
                {
                    b.HasOne("TestGameCars.Entities.Driver", "driver")
                        .WithOne("player")
                        .HasForeignKey("TestGameCars.Entities.Player", "idDriver")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("driver");
                });

            modelBuilder.Entity("TestGameCars.Entities.Track", b =>
                {
                    b.HasOne("TestGameCars.Entities.Line", "line")
                        .WithMany("tracks")
                        .HasForeignKey("idLine")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("line");
                });

            modelBuilder.Entity("TestGameCars.Entities.Car", b =>
                {
                    b.Navigation("driver");

                    b.Navigation("games");
                });

            modelBuilder.Entity("TestGameCars.Entities.Driver", b =>
                {
                    b.Navigation("games");

                    b.Navigation("player");
                });

            modelBuilder.Entity("TestGameCars.Entities.Line", b =>
                {
                    b.Navigation("games");

                    b.Navigation("tracks");
                });

            modelBuilder.Entity("TestGameCars.Entities.Player", b =>
                {
                    b.Navigation("games");
                });

            modelBuilder.Entity("TestGameCars.Entities.Track", b =>
                {
                    b.Navigation("games");
                });
#pragma warning restore 612, 618
        }
    }
}
